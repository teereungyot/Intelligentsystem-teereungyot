import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
import os
import tensorflow.keras.backend as K
K.clear_session()
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ UI ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(page_title="Develop Machine Learning Models & Neural Network Models", layout="wide")


csv_path_air = "data/Cleaned_AirQualityUCI.csv"
csv_path_student = "data/Cleaned_StudentPerformance.csv"

if os.path.exists(csv_path_air):
    df_air = pd.read_csv(csv_path_air).head(10)
    st.dataframe(df_air)

if os.path.exists(csv_path_student):
    df_student = pd.read_csv(csv_path_student).head(10)
    st.dataframe(df_student)    

# ‡∏ù‡∏±‡∏á CSS ‡∏•‡∏á‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î


# ‡∏™‡∏£‡πâ‡∏≤‡∏á Navbar
page = st.sidebar.radio("## Menu", ["üè† Homepage", "üìñ About Machine Learning", "üìñ About Neural Network", "‚è≥ Explain Dataset", "üìä Machine Learning demo", "ü§ñ Neural Network demo"])

# ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
if page == "üè† Homepage":
    st.markdown("""
        <div style="text-align: left;margin-top: 30px;">
        <div class="set-text-card">
            <h3 style="text-align: center;"> üîπ Introduction Intelligent System üîπ </h3>
            <p style="text-align: center;font-size:20px;margin-top: 30px;"> üìå ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ Intelligent System ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ Machine
            learning & Neural Network ‡πÅ‡∏•‡∏∞‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ üìå </p>
            <p style="font-size:20px;margin-top: 30px;">- Air Quality Dataset ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
            ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏°‡∏•‡∏û‡∏¥‡∏©‡∏ó‡∏≤‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡∏∞‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ </p>
            <p style="font-size:20px;">- Student Performance Dataset ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô 
            ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (G3) ‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ</p> 
        </div>    
            <div style=" font-size: 18px; margin-top: 30px" class="set-text-card">
                <strong style="text-align: left; ">üîπ ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• üîπ</strong>
                <p style="text-align: left; margin-top: 10px"> <a href="https://archive.ics.uci.edu/ml/datasets/Air+Quality">UCI Machine Learning Repository - Air Quality Data</a>  </p>
                <p style="text-align: left;"> <a href="https://archive.ics.uci.edu/ml/datasets/Student+Performance">UCI Machine Learning Repository - Student Performance Data </a></p>
                <b style="text-align: left;">üîπ ‡∏à‡∏±‡∏î‡∏ó‡∏≥‡πÇ‡∏î‡∏¢ üîπ</b>
                <p style="font-size: 18px;margin-top: 10px"> ‡∏ô‡∏≤‡∏¢‡πÄ‡∏£‡∏∑‡∏≠‡∏á‡∏¢‡∏® ‡πÄ‡∏ò‡∏µ‡∏¢‡∏£‡∏ó‡∏¥‡∏û‡∏¢‡πå‡∏ß‡∏¥‡∏ö‡∏π‡∏• ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ 6404062636455 </p>
        </div>
    """, unsafe_allow_html=True)
   

# ‡∏´‡∏ô‡πâ‡∏≤ About1
elif page == "üìñ About Machine Learning":
    st.title("‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning (Air Quality Dataset)")
    st.write("""

        ### 1. ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data Preparation)
        #### 1.1 ‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data Collection)
        - ‡πÉ‡∏ä‡πâ Air Quality Dataset ‡∏ã‡∏∂‡πà‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏°‡∏•‡∏û‡∏¥‡∏©‡∏ó‡∏≤‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ‡πÄ‡∏ä‡πà‡∏ô CO (Carbon Monoxide), NO2 (Nitrogen Dioxide), PM10, PM2.5
        - ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (Temperature), ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô (Humidity), ‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏≠‡∏≤‡∏Å‡∏≤‡∏® (Pressure)

        #### 1.2 ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data Cleaning)
        - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Missing Values ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (Mean) ‡∏´‡∏£‡∏∑‡∏≠ Interpolation
        - ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
        - ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö datetime
        - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢ Interquartile Range (IQR) ‡∏´‡∏£‡∏∑‡∏≠ Z-score

        #### 1.3 ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Features (Feature Selection & Transformation)
        - ‡πÉ‡∏ä‡πâ Standardization ‡∏´‡∏£‡∏∑‡∏≠ Normalization ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        - ‡∏≠‡∏≤‡∏à‡∏™‡∏£‡πâ‡∏≤‡∏á Features ‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏°‡∏•‡∏û‡∏¥‡∏©‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ (Moving Average)

        ### 2. ‡∏ó‡∏§‡∏©‡∏é‡∏µ‡∏Ç‡∏≠‡∏á‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
        #### 2.1 Linear Regression
        - Linear Regression ‡πÉ‡∏ä‡πâ‡∏™‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:
          \[ y = \beta_0 + \beta_1 X_1 + \beta_2 X_2 + ... + \beta_n X_n + \epsilon \]
        - ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡πà‡∏≤‡∏°‡∏•‡∏û‡∏¥‡∏©‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï

        #### 2.2 Random Forest Regressor
        - Random Forest ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡πÅ‡∏ö‡∏ö Ensemble Learning ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏≤‡∏¢ Decision Trees
        - ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡πà‡∏° Features ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡πâ‡∏ô ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå

        ### 3. ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• (Model Development)
        #### 3.1 ‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Train-Test Split)
        - ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô **Training Set 80%** ‡πÅ‡∏•‡∏∞ **Test Set 20%**
        - ‡πÉ‡∏ä‡πâ `train_test_split` ‡∏à‡∏≤‡∏Å `sklearn.model_selection`

        #### 3.2 ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Feature Scaling)
        - ‡πÉ‡∏ä‡πâ **StandardScaler** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•

        #### 3.3 ‡∏Å‡∏≤‡∏£ Train ‡πÇ‡∏°‡πÄ‡∏î‡∏• (Model Training)
        **Linear Regression:**
        ```python
        from sklearn.linear_model import LinearRegression
        lr_model = LinearRegression()
        lr_model.fit(X_train_scaled, y_train)
        lr_preds = lr_model.predict(X_test_scaled)
        ```
        **Random Forest Regressor:**
        ```python
        from sklearn.ensemble import RandomForestRegressor
        rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
        rf_model.fit(X_train, y_train)
        rf_preds = rf_model.predict(X_test)
        ```

        #### 3.4 ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (Model Evaluation)
        - ‡πÉ‡∏ä‡πâ **Mean Absolute Error (MAE)** ‡πÅ‡∏•‡∏∞ **Root Mean Squared Error (RMSE)** ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î
        ```python
        from sklearn.metrics import mean_absolute_error, mean_squared_error
        import numpy as np

        def evaluate_model(y_true, y_pred, model_name):
            mae = mean_absolute_error(y_true, y_pred)
            rmse = np.sqrt(mean_squared_error(y_true, y_pred))
            print(f"{model_name}: MAE: {mae:.4f}, RMSE: {rmse:.4f}")
        
        evaluate_model(y_test, lr_preds, "Linear Regression")
        evaluate_model(y_test, rf_preds, "Random Forest")
        ```

        #### 3.5 ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• (Hyperparameter Tuning)
        - ‡πÉ‡∏ä‡πâ **GridSearchCV** ‡∏´‡∏£‡∏∑‡∏≠ **RandomizedSearchCV** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö **Random Forest** ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ **n_estimators, max_depth, min_samples_split**

        #### 3.6 ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• (Model Saving)
        - ‡πÉ‡∏ä‡πâ `joblib` ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
        ```python
        import joblib
        joblib.dump(rf_model, "random_forest_model.pkl")
        ```
       ### 4. ‡∏™‡∏£‡∏∏‡∏õ
        - ‡∏ó‡∏≥ Data Cleaning & Feature Engineering ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞ Missing Values
        - ‡πÉ‡∏ä‡πâ Linear Regression ‡πÅ‡∏•‡∏∞ Random Forest ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡πà‡∏≤‡∏°‡∏•‡∏û‡∏¥‡∏©‡∏ó‡∏≤‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
        - ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î MAE ‡πÅ‡∏•‡∏∞ RMSE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
        - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏î‡πâ‡∏ß‡∏¢ Hyperparameter Tuning
    """)
# ‡∏´‡∏ô‡πâ‡∏≤ About Neural Network
elif page == "üìñ About Neural Network":
    st.title("‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• Neural Network (Student Performance Dataset)")
    st.write("""
     
        


        ### 1. ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data Preparation)
        #### 1.1 ‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data Collection)
        - ‡πÉ‡∏ä‡πâ Student Performance Dataset ‡∏ã‡∏∂‡πà‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô G1, G2, G3
        - ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏á, ‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß, ‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡πà‡∏≤‡∏á

        #### 1.2 ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data Cleaning)
        - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Missing Values ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (Mean) ‡∏´‡∏£‡∏∑‡∏≠ Interpolation
        - ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Categorical ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ One-Hot Encoding
        - ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô

        ### 2. ‡∏ó‡∏§‡∏©‡∏é‡∏µ‡∏Ç‡∏≠‡∏á‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: Multi-Layer Perceptron (MLP)
        Multi-Layer Perceptron (MLP) ‡πÄ‡∏õ‡πá‡∏ô Neural Network ‡πÅ‡∏ö‡∏ö Fully Connected ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:

        - **Input Layer:** ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Features
        - **Hidden Layers:** ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Activation Function ‡πÄ‡∏ä‡πà‡∏ô ReLU
        - **Output Layer:** ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (G3)

        ‡∏™‡∏°‡∏Å‡∏≤‡∏£‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á MLP:
        \[ y = f(WX + b) \]
        ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà:
        - \( X \) ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï (Features ‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô)
        - \( W \) ‡∏Ñ‡∏∑‡∏≠‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
        - \( b \) ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà (Bias)
        - \( f \) ‡∏Ñ‡∏∑‡∏≠ Activation Function ‡πÄ‡∏ä‡πà‡∏ô ReLU ‡∏´‡∏£‡∏∑‡∏≠ Sigmoid

        ### 3. ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• (Model Development)
        #### 3.1 ‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Train-Test Split)
        - ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô ‡∏ä‡∏∏‡∏î‡∏ù‡∏∂‡∏Å‡∏™‡∏≠‡∏ô (Training Set) 80% ‡πÅ‡∏•‡∏∞ ‡∏ä‡∏∏‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö (Test Set) 20%
        - ‡πÉ‡∏ä‡πâ `train_test_split` ‡∏à‡∏≤‡∏Å `sklearn.model_selection` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°

        #### 3.2 ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Feature Scaling)
        - ‡πÉ‡∏ä‡πâ `StandardScaler` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Neural Network
        ```python
        from sklearn.preprocessing import StandardScaler
        scaler = StandardScaler()
        X_train_scaled = scaler.fit_transform(X_train)
        X_test_scaled = scaler.transform(X_test)
        ```
        
        #### 3.3 ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• MLP (Neural Network)
        ```python
        from tensorflow.keras.models import Sequential
        from tensorflow.keras.layers import Dense, Dropout

        model = Sequential([
            Dense(64, activation='relu', input_shape=(X_train_scaled.shape[1],)),
            Dropout(0.2),
            Dense(32, activation='relu'),
            Dropout(0.2),
            Dense(1)  # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô G3
        ])
        model.compile(optimizer='adam', loss='mse', metrics=['mae'])
        ```
        
        #### 3.4 ‡∏Å‡∏≤‡∏£ Train ‡πÇ‡∏°‡πÄ‡∏î‡∏•
        ```python
        history = model.fit(X_train_scaled, y_train, epochs=100, batch_size=16, validation_data=(X_test_scaled, y_test))
        ```
        
        #### 3.5 ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (Model Evaluation)
        ```python
        from sklearn.metrics import mean_absolute_error, mean_squared_error
        import numpy as np

        preds = model.predict(X_test_scaled)
        mae = mean_absolute_error(y_test, preds)
        rmse = np.sqrt(mean_squared_error(y_test, preds))
        print(f"Neural Network - MAE: {mae:.4f}, RMSE: {rmse:.4f}")
        ```
        
        #### 3.6 ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• (Model Saving)
        ```python
        model.save("student_performance_nn.keras")
        ```
        
        ### 4. ‡∏™‡∏£‡∏∏‡∏õ
        - ‡∏ó‡∏≥ Data Cleaning & Feature Engineering ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞ Missing Values
        - ‡πÉ‡∏ä‡πâ **MLP Neural Network** ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (**G3**)
        - ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î **MAE ‡πÅ‡∏•‡∏∞ RMSE** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
        - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏î‡πâ‡∏ß‡∏¢ **Hyperparameter Tuning ‡πÅ‡∏•‡∏∞ Regularization (Dropout, Batch Normalization)**
    """)

# ‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ Dataset
elif page == "‚è≥ Explain Dataset":
    st.title("‚è≥ Explain Dataset")
    
    dataset_choice = st.radio("## ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Dataset:", ["üåç Air Quality Dataset", "üéì Student Performance Dataset"])
    
    if dataset_choice == "üåç Air Quality Dataset":
        st.subheader("üåç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏•‡∏û‡∏¥‡∏©‡∏ó‡∏≤‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏® (Air Quality Dataset)")
        st.write("""
            Dataset ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡πà‡∏≤‡∏°‡∏•‡∏û‡∏¥‡∏©‡∏ó‡∏≤‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏® (**CO(GT)**)  
            ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ß‡∏±‡∏î‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏≠‡∏¥‡∏ï‡∏≤‡∏•‡∏µ ‚òÅ  
        """)
        # ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        df_air = pd.read_csv("./Cleaned_AirQualityUCI.csv").head(10)
        st.dataframe(df_air)
        st.write("""
            **Features ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ:**
            - `CO(GT)`: ‡∏Ñ‡πà‡∏≤‡∏°‡∏•‡∏û‡∏¥‡∏© CO (‡∏´‡∏ô‡πà‡∏ß‡∏¢ ppm)
            - `PT08.S1(CO)`: ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏°‡∏•‡∏û‡∏¥‡∏©‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà 1
            - `C6H6(GT)`: ‡∏Ñ‡πà‡∏≤‡∏°‡∏•‡∏û‡∏¥‡∏© Benzene
            - `T`: ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (¬∞C)
            - `RH`: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå (%)
            - `AH`: Absolute Humidity  
        """)
        st.write("**‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:** [UCI Machine Learning Repository - Air Quality Data](https://archive.ics.uci.edu/ml/datasets/Air+Quality)")

    elif dataset_choice == "üéì Student Performance Dataset":
        st.subheader("üéì ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (Student Performance Dataset)")
        st.write("""
            Dataset ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏≠‡∏ö **G3** ‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô üéì  
            ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏û‡∏®, ‡∏≠‡∏≤‡∏¢‡∏∏, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏á, ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Ø‡∏•‡∏Ø  
        """)
        # ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        df_student = pd.read_csv("./Cleaned_StudentPerformance.csv").head(10)
        st.dataframe(df_student)
        st.write("""
            **Features ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ:**
            - `G1, G2`: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            - `studytime`: ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
            - `failures`: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ö‡∏ï‡∏Å
            - `freetime`: ‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
            - `goout`: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß  
        """)
        st.write("**‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:** [UCI Machine Learning Repository - Student Performance Data](https://archive.ics.uci.edu/ml/datasets/Student+Performance)")

# **Machine Learning (Air Quality Prediction)**
elif page == "üìä Machine Learning demo":
    st.title("üìä Air Quality Prediction using Machine Learning")
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    df = pd.read_csv("./Cleaned_AirQualityUCI.csv").drop(columns=["Datetime"])
    target_column = "CO(GT)"
    X = df.drop(columns=[target_column])
    y = df[target_column]

    # ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    # ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
    rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
    rf_model.fit(X_train_scaled, y_train)
    lr_model = LinearRegression()
    lr_model.fit(X_train_scaled, y_train)
    
    # ‡∏õ‡∏∏‡πà‡∏°‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
    if st.button("Predict Air Quality"):
        random_sample = X_test.sample(n=10, random_state=np.random.randint(1000))
        random_sample_scaled = scaler.transform(random_sample)
        prediction_rf = rf_model.predict(random_sample_scaled)
        prediction_lr = lr_model.predict(random_sample_scaled)

        st.write("**Random Forest Prediction (ppm CO(GT))**", prediction_rf)
        st.write("**Linear Regression Prediction (ppm CO(GT))**", prediction_lr)

        # ‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô
        fig, ax = plt.subplots()
        ax.plot(range(len(prediction_rf)), prediction_rf, marker='o', linestyle='-', label='Random Forest')
        ax.plot(range(len(prediction_lr)), prediction_lr, marker='s', linestyle='-', label='Linear Regression')
        ax.set_xlabel("Sample Index")
        ax.set_ylabel("Predicted CO(GT) ppm")
        ax.set_title("Air Quality Prediction Comparison")
        ax.legend()
        st.pyplot(fig)
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏°‡∏•‡∏û‡∏¥‡∏©
        avg_prediction = np.mean(prediction_rf)
        if avg_prediction < 2.0:
            air_quality = "üåø ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ"
        elif 2.0 <= avg_prediction < 5.0:
            air_quality = "üò∑ ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏°‡∏µ‡∏°‡∏•‡∏û‡∏¥‡∏©‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
        else:
            air_quality = "üö® ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏¢‡πà ‡∏°‡∏µ‡∏°‡∏•‡∏û‡∏¥‡∏©‡∏™‡∏π‡∏á!"
        st.subheader(f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: {air_quality}")

# **Neural Network (Student Score Prediction)**
elif page == "ü§ñ Neural Network demo":
    st.title("ü§ñ Student Score Prediction using Neural Network")

    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    df = pd.read_csv("./Cleaned_StudentPerformance.csv")
    df = pd.get_dummies(df, drop_first=True)
    target_column = "G3"
    X = df.drop(columns=[target_column])
    y = df[target_column]

    # ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    # ‡πÇ‡∏°‡πÄ‡∏î‡∏• MLP
    K.clear_session()
    mlp_model = Sequential([
    Dense(128, activation='relu', input_shape=(X_train_scaled.shape[1],)),
    Dropout(0.2),
    Dense(64, activation='relu'),
    Dense(1)
    ])
    mlp_model.compile(optimizer='adam', loss='mse', metrics=['mae'])
    mlp_model.fit(X_train_scaled, y_train, epochs=50, batch_size=16, verbose=0)
    
    # ‡∏õ‡∏∏‡πà‡∏°‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
    if st.button("Predict Student Score"):
        random_sample = X_test.sample(n=10, random_state=np.random.randint(1000))
        random_sample_scaled = scaler.transform(random_sample)
        prediction_mlp = mlp_model.predict(random_sample_scaled).flatten()

        st.write("**MLP Prediction (G3 Score)**", prediction_mlp)

        # ‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô
        fig, ax = plt.subplots()
        ax.plot(range(len(prediction_mlp)), prediction_mlp, marker='o', linestyle='-', color='green', label='MLP Prediction')
        ax.set_xlabel("Sample Index")
        ax.set_ylabel("Predicted G3 Score")
        ax.set_title("Student Score Prediction")
        ax.legend()
        st.pyplot(fig)
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        avg_prediction = np.mean(prediction_mlp)
        if avg_prediction >= 15:
            score_status = "üéì ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏î‡∏µ‡∏°‡∏≤‡∏Å"
        elif 10 <= avg_prediction < 15:
            score_status = "üìö ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
        else:
            score_status = "‚ö†Ô∏è ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≥ ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"
        st.subheader(f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: {score_status}")


